---
export type RpkmColorName = 'purple' | 'blue' | 'pink' | 'black';

export interface Props {
  variant?: 'fill' | 'stroke';
  color?: RpkmColorName;
  size?: 'xs' | 'sm' | 'md' | 'lg';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  onclick?: string;
}

const { 
  variant = 'fill',
  color = 'purple',
  size = 'md',
  disabled = false,
  type = 'button',
  class: className = '',
  onclick = ''
} = Astro.props;

// RPKM Colors configuration using exact Figma colors
const colorConfig = {
  purple: {
    fill: {
      base: 'text-white drop-shadow-[0px_2px_5px_rgba(255,255,255,0.3)]',
      active: '',
      disabled: 'disabled:opacity-50'
    },
    stroke: {
      base: 'bg-transparent text-[#8a2be4] relative',
      active: '',
      disabled: 'disabled:opacity-50'
    }
  },
  blue: {
    fill: {
      base: 'text-white drop-shadow-[0px_2px_5px_rgba(255,255,255,0.3)]',
      active: '',
      disabled: 'disabled:opacity-50'
    },
    stroke: {
      base: 'bg-transparent text-[#00ffff] relative',
      active: '',
      disabled: 'disabled:opacity-50'
    }
  },
  pink: {
    fill: {
      base: 'text-white drop-shadow-[0px_2px_5px_rgba(255,255,255,0.3)]',
      active: '',
      disabled: 'disabled:opacity-50'
    },
    stroke: {
      base: 'bg-transparent text-[#ff1493] relative',
      active: '',
      disabled: 'disabled:opacity-50'
    }
  },
  black: {
    fill: {
      base: 'text-white drop-shadow-[0px_2px_5px_rgba(255,255,255,0.3)]',
      active: '',
      disabled: 'disabled:opacity-50'
    },
    stroke: {
      base: 'bg-transparent text-[#2b2d42] relative',
      active: '',
      disabled: 'disabled:opacity-50'
    }
  }
};

// Size configuration with Tailwind classes
const sizeConfig = {
  xs: { 
    classes: 'px-3 py-2 text-sm',
    width: 'w-26',
    height: 'h-10',
    iconSize: 16
  },
  sm: { 
    classes: 'px-4 py-3 text-base',
    width: 'w-32',
    height: 'h-12',
    iconSize: 18
  },
  md: { 
    classes: 'px-5 py-3 text-lg',
    width: 'w-44',
    height: 'h-12',
    iconSize: 20
  },
  lg: { 
    classes: 'px-6 py-3 text-xl',
    width: 'w-64',
    height: 'h-12',
    iconSize: 24
  }
};

const currentColorConfig = colorConfig[color][variant];
const currentSizeConfig = sizeConfig[size];

// Font family classes based on size
const fontConfig = {
  xs: 'font-ibm-plex-sans-thai',
  sm: 'font-ibm-plex-sans-thai',
  md: 'font-ibm-plex-sans-thai', 
  lg: 'font-ibm-plex-sans-thai'
};

// Generate complete class list using Tailwind classes
const buttonClasses = [
  // Base button classes
  'relative inline-flex items-center justify-center font-medium',
  'transition-all duration-200 ease-in-out',
  'focus:outline-none focus:ring-2 focus:ring-offset-2',
  'disabled:cursor-not-allowed',
  
  // Size classes
  currentSizeConfig.classes,
  currentSizeConfig.width,
  currentSizeConfig.height,
  
  // Font classes
  fontConfig[size],
  
  // Color classes
  currentColorConfig.base,
  currentColorConfig.disabled,
  
  // Add edge cuts for RPKM style
  'cut-edge-all',
  
  // Custom classes
  className
].filter(Boolean).join(' ');

// Custom gradient styles for each color variant (fill only)
const getGradientStyle = () => {
  if (variant !== 'fill') return '';
  
  // Exact Figma color variables
  const figmaColors = {
    purple: '#8a2be4', // RPKM/Main_Purple
    blue: '#00ffff',   // RPKM/Main_Blue
    pink: '#ff1493',   // RPKM/Main_Hot pink
    black: '#2b2d42',  // RPKM/Main_Navy (for black buttons)
    navy: '#2b2d42',   // RPKM/Main_Navy
    subBlack: '#000000' // RPKM/Sub_Black
  };
  
  const mainColor = figmaColors[color];
  const navyColor = figmaColors.navy;
  
  // For black buttons, use navy and black colors instead of black as main
  const blackMainColor = color === 'black' ? navyColor : mainColor;
  const blackSecondColor = color === 'black' ? figmaColors.subBlack : navyColor;
  
  // Size-based gradient patterns using only Figma colors
  if (size === 'lg') {
    // lg buttons: 0% main color, 50% navy, 100% main color
    // For black: 0% navy, 50% black, 100% navy
    return `background: linear-gradient(90deg, ${blackMainColor} 0%, ${blackSecondColor} 50%, ${blackMainColor} 100%);`;
  } else {
    // xs, sm, md buttons: 0% main color, 100% navy
    // For black: 0% navy, 100% black
    return `background: linear-gradient(90deg, ${blackMainColor} 0%, ${blackSecondColor} 100%);`;
  }
};

// Generate SVG border for stroke variants
const getSvgBorder = () => {
  if (variant !== 'stroke') return '';
  
  const figmaColors = {
    purple: '#8a2be4',
    blue: '#00ffff',
    pink: '#ff1493',
    black: '#2b2d42'
  };
  
  const strokeColor = figmaColors[color];
  const { width: widthClass, height: heightClass } = currentSizeConfig;
  
  // Convert Tailwind width/height to actual pixel values
  const dimensions: Record<string, { width: number; height: number }> = {
    'w-26': { width: 104, height: 40 }, // xs
    'w-32': { width: 128, height: 48 }, // sm
    'w-44': { width: 176, height: 48 }, // md
    'w-64': { width: 256, height: 48 }  // lg
  };
  
  const { width, height } = dimensions[widthClass] || { width: 176, height: 48 };
  const cutSize = 20;
  
  const svgPath = `M${cutSize},0 L${width},0 L${width},${height - cutSize} L${width - cutSize},${height} L0,${height} L0,${cutSize} Z`;
  
  const svgDataUrl = `data:image/svg+xml,${encodeURIComponent(`
    <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
      <path d="${svgPath}" stroke="${strokeColor}" stroke-width="2" fill="none"/>
    </svg>
  `)}`;
  
  return `background-image: url("${svgDataUrl}");`;
};
---

<style>
  .rpkm-button:focus:not(:disabled) {
    outline: 2px solid rgba(255, 255, 255, 0.3);
    outline-offset: 2px;
  }
  
  /* SVG border positioning for stroke variants */
  .rpkm-button[data-variant="stroke"] {
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
  }
</style>

<button 
  class={`${buttonClasses} rpkm-button`}
  style={`${getGradientStyle()}${getSvgBorder()}`}
  type={type}
  disabled={disabled}
  onclick={onclick}
  data-variant={variant}
  data-color={color}
  data-size={size}
>
  <slot name="icon" />
  <slot />
</button>