---
import type { EventConfig } from '@/lib/eventAPI';

interface Props {
  eventName: string;
  eventId?: string;
  eventConfig: EventConfig;
}

const { eventName, eventId, eventConfig } = Astro.props;
import Popup from './Popup.astro';
---
<section class="flex flex-col items-center justify-center">
        <Popup
        size="medium"   
        color="light-green"                                     
        class="flex flex-col items-center justify-center text-center"
      >        
        <p>{eventConfig.description}</p>
        <p class="mt-4">{eventConfig.schedule}</p>
        <p>{eventConfig.registrationInfo}</p>
        <p>{eventConfig.additionalInfo}</p>
        <p class="mt-4 text-[#C6EBC5] font-bold">ลงทะเบียนสำเร็จ!</p>        
      </Popup>       
      <h1 class="text-4xl text-white text-center font-bold fill-white drop-shadow-lg drop-shadow-white/50 mb-8">กำลังโหลด</h1>      
</section>

<script>
  import confetti from 'canvas-confetti';

  // Function to create custom confetti with background positioning
  function createConfetti() {
    // Create a canvas element and position it behind content
    const canvas = document.createElement('canvas');
    canvas.style.position = 'fixed';
    canvas.style.top = '0';
    canvas.style.left = '50%';
    canvas.style.transform = 'translateX(-50%)';
    canvas.style.width = '440px'; // Match your max-width
    canvas.style.maxWidth = '100vw'; // Responsive fallback
    canvas.style.height = '100vh';
    canvas.style.zIndex = '1'; // In front of background, behind content
    canvas.style.pointerEvents = 'none';
    document.body.appendChild(canvas);

    // Create confetti instance on our custom canvas
    const myConfetti = confetti.create(canvas, {
      resize: true,
      useWorker: true
    });

    const duration = 3000; // 3 seconds
    const end = Date.now() + duration;
    const colors = ['#f43f5e', '#10b981', '#3b82f6', '#8b5cf6', '#f59e0b', '#ef4444', '#06b6d4', '#84cc16'];

    // Function for continuous confetti
    const frame = () => {
      // Left side confetti
      myConfetti({
        particleCount: 3,
        angle: 60,
        spread: 45,
        origin: { x: 0, y: 0.6 },
        colors: colors,
        gravity: 0.8,
        drift: 1,
        scalar: 1.0
      });

      // Right side confetti  
      myConfetti({
        particleCount: 3,
        angle: 120,
        spread: 45,
        origin: { x: 1, y: 0.6 },
        colors: colors,
        gravity: 0.8,
        drift: -1,
        scalar: 1.0
      });

      // Center top confetti
      myConfetti({
        particleCount: 4,
        angle: 90,
        spread: 50,
        origin: { x: 0.5, y: 0.1 },
        colors: colors,
        gravity: 0.9,
        drift: 0,
        scalar: 1.0
      });

      if (Date.now() < end) {
        requestAnimationFrame(frame);
      }
    };

    frame();

    // Clean up canvas after confetti is done
    setTimeout(() => {
      setTimeout(() => {
        if (canvas && canvas.parentNode) {
          canvas.parentNode.removeChild(canvas);
        }
      }, 3000); // Wait 3 more seconds for particles to clear
    }, duration);
  }

  // Auto-start confetti when component loads
  createConfetti();

  // Auto-redirect after confetti and display time
  setTimeout(() => {
    // Get eventId from the URL or use passed prop
    const urlParams = new URLSearchParams(window.location.search);
    const currentPath = window.location.pathname;
    const eventIdMatch = currentPath.match(/\/events\/([^\/]+)\//);
    const eventId = eventIdMatch ? eventIdMatch[1] : null;
    
    if (eventId) {
      // Redirect back to event page to show "already registered" state
      window.location.href = `/firstdate/events/${eventId}/`;
    } else {
      // Fallback to home page
      window.location.href = '/firstdate/home/';
    }
  }, 4000); // Redirect after 4 seconds (total display time)
</script>