---
interface Props {
  eventName: string;
}

const { eventName } = Astro.props;
import Popup from './Popup.astro';
---
<section class="flex flex-col items-center justify-center">
        <Popup
        size="medium"   
        color="light-beige"                                     
        class="flex flex-col items-center justify-center text-center"
      >        
        <p>‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞ ‡πÑ‡∏î‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞</p>
        <p class="mt-4">üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1‚Äì3 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568</p>
        <p>üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‚Äú‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‚Äù ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
        <p>ü´∂ ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‚Äú‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‚Äù ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏è‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 20:00 ‡∏ô</p>        
      </Popup>       
      <h1 class="text-4xl text-white text-center font-bold fill-white drop-shadow-lg drop-shadow-white/50 mb-8">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î</h1>      
</section>

<script>
  import confetti from 'canvas-confetti';

  // Function to create custom confetti with background positioning
  function createConfetti() {
    // Create a canvas element and position it behind content
    const canvas = document.createElement('canvas');
    canvas.style.position = 'fixed';
    canvas.style.top = '0';
    canvas.style.left = '50%';
    canvas.style.transform = 'translateX(-50%)';
    canvas.style.width = '440px'; // Match your max-width
    canvas.style.maxWidth = '100vw'; // Responsive fallback
    canvas.style.height = '100vh';
    canvas.style.zIndex = '1'; // In front of background, behind content
    canvas.style.pointerEvents = 'none';
    document.body.appendChild(canvas);

    // Create confetti instance on our custom canvas
    const myConfetti = confetti.create(canvas, {
      resize: true,
      useWorker: true
    });

    const duration = 8000; // 8 seconds
    const end = Date.now() + duration;
    const colors = ['#f43f5e', '#10b981', '#3b82f6', '#8b5cf6', '#f59e0b', '#ef4444', '#06b6d4', '#84cc16'];

    // Function for continuous confetti
    const frame = () => {
      // Left side confetti
      myConfetti({
        particleCount: 7,
        angle: 60,
        spread: 55,
        origin: { x: 0, y: 0.6 },
        colors: colors,
        gravity: 0.8,
        drift: 1,
        scalar: 1.2
      });

      // Right side confetti  
      myConfetti({
        particleCount: 7,
        angle: 120,
        spread: 55,
        origin: { x: 1, y: 0.6 },
        colors: colors,
        gravity: 0.8,
        drift: -1,
        scalar: 1.2
      });

      // Center top confetti
      myConfetti({
        particleCount: 10,
        angle: 90,
        spread: 70,
        origin: { x: 0.5, y: 0.1 },
        colors: colors,
        gravity: 0.9,
        drift: 0,
        scalar: 1.1
      });

      if (Date.now() < end) {
        requestAnimationFrame(frame);
      }
    };

    frame();

    // Additional random bursts
    const interval = setInterval(() => {
      myConfetti({
        particleCount: 15,
        angle: Math.random() * 60 + 60, // 60-120 degrees
        spread: 60,
        origin: { 
          x: Math.random() * 0.6 + 0.2, // 0.2 to 0.8
          y: Math.random() * 0.3 + 0.1  // 0.1 to 0.4
        },
        colors: colors,
        gravity: 0.8,
        scalar: 1.0
      });
    }, 300);

    // Clear interval and remove canvas after duration
    setTimeout(() => {
      clearInterval(interval);
      // Clean up canvas after confetti is done
      setTimeout(() => {
        if (canvas && canvas.parentNode) {
          canvas.parentNode.removeChild(canvas);
        }
      }, 3000); // Wait 3 more seconds for particles to clear
    }, duration);
  }

  // Auto-start confetti when component loads
  createConfetti();

  // Auto-redirect after confetti and display time
  setTimeout(() => {
    window.location.href = '/firstdate/home/';
  }, 8000); // Redirect after 8 seconds (total display time)
</script>