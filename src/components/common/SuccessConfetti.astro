---
import type { EventConfig } from "@/lib/eventAPI";

interface Props {
  eventName: string;
  eventId?: string;
  eventConfig: EventConfig;
}

const { eventConfig } = Astro.props;
import Popup from "./Popup.astro";
---

<section class="flex flex-col items-center justify-center">
  <Popup
    size="medium"
    color="light-green"
    class="flex flex-col items-center justify-center text-center"
  >
    <p>{eventConfig.description}</p>
    <p class="mt-4">{eventConfig.schedule}</p>
    <p>{eventConfig.registrationInfo}</p>
    <p>{eventConfig.additionalInfo}</p>
    <p class="mt-4 font-bold text-[#C6EBC5]">ลงทะเบียนสำเร็จ!</p>
  </Popup>
  <h1
    class="mb-8 fill-white text-center text-4xl font-bold text-white drop-shadow-lg drop-shadow-white/50"
  >
    กำลังโหลด
  </h1>
</section>

<script>
  // Auto-redirect timer with error handling
  let redirectTimer;
  let confettiLoaded = false;

  // Immediate redirect setup (fallback)
  const setupRedirect = () => {
    redirectTimer = setTimeout(() => {
      // Get eventId from the URL or use passed prop
      const currentPath = window.location.pathname;
      const eventIdMatch = currentPath.match(/\/events\/([^\/]+)\//);
      const eventId = eventIdMatch ? eventIdMatch[1] : null;

      if (eventId) {
        // Redirect back to event page to show "already registered" state
        window.location.href = `/firstdate/events/${eventId}/`;
      } else {
        // Fallback to home page
        window.location.href = "/firstdate/home/";
      }
    }, 4000); // Redirect after 4 seconds
  };

  // Try to load confetti, but don't break if it fails
  const tryLoadConfetti = async () => {
    try {
      // Dynamic import with error handling
      const confettiModule = await import("canvas-confetti");
      const confetti = confettiModule.default || confettiModule;
      confettiLoaded = true;

      // Update loading text
      const loadingText = document.querySelector("h1");
      if (loadingText) {
        loadingText.textContent = "ลงทะเบียนสำเร็จ!";
      }

      // Function to create custom confetti with background positioning
      function createConfetti() {
        // Create a canvas element and position it behind content
        const canvas = document.createElement("canvas");
        canvas.style.position = "fixed";
        canvas.style.top = "0";
        canvas.style.left = "50%";
        canvas.style.transform = "translateX(-50%)";
        canvas.style.width = "440px"; // Match your max-width
        canvas.style.maxWidth = "100vw"; // Responsive fallback
        canvas.style.height = "100vh";
        canvas.style.zIndex = "1"; // In front of background, behind content
        canvas.style.pointerEvents = "none";
        document.body.appendChild(canvas);

        // Create confetti instance on our custom canvas
        const myConfetti = confetti.create(canvas, {
          resize: true,
          useWorker: true,
        });

        const duration = 3000; // 3 seconds
        const end = Date.now() + duration;
        const colors = [
          "#f43f5e",
          "#10b981",
          "#3b82f6",
          "#8b5cf6",
          "#f59e0b",
          "#ef4444",
          "#06b6d4",
          "#84cc16",
        ];

        // Function for continuous confetti
        const frame = () => {
          // Left side confetti
          myConfetti({
            particleCount: 3,
            angle: 60,
            spread: 45,
            origin: { x: 0, y: 0.6 },
            colors: colors,
            gravity: 0.8,
            drift: 1,
            scalar: 1.0,
          });

          // Right side confetti
          myConfetti({
            particleCount: 3,
            angle: 120,
            spread: 45,
            origin: { x: 1, y: 0.6 },
            colors: colors,
            gravity: 0.8,
            drift: -1,
            scalar: 1.0,
          });

          // Center top confetti
          myConfetti({
            particleCount: 4,
            angle: 90,
            spread: 50,
            origin: { x: 0.5, y: 0.1 },
            colors: colors,
            gravity: 0.9,
            drift: 0,
            scalar: 1.0,
          });

          if (Date.now() < end) {
            requestAnimationFrame(frame);
          }
        };

        frame();

        // Clean up canvas after confetti is done
        setTimeout(() => {
          setTimeout(() => {
            if (canvas && canvas.parentNode) {
              canvas.parentNode.removeChild(canvas);
            }
          }, 3000); // Wait 3 more seconds for particles to clear
        }, duration);
      }

      // Start confetti
      createConfetti();
    } catch (error) {
      console.error("Failed to load confetti:", error);
      // Update loading text to show success without confetti
      const loadingText = document.querySelector("h1");
      if (loadingText) {
        loadingText.textContent = "ลงทะเบียนสำเร็จ!";
        loadingText.style.color = "#C6EBC5";
      }
    }
  };

  // Initialize everything
  document.addEventListener("DOMContentLoaded", () => {
    // Setup redirect timer first (safety net)
    setupRedirect();

    // Try to load confetti
    tryLoadConfetti();
  });

  // Fallback if DOMContentLoaded already fired
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      setupRedirect();
      tryLoadConfetti();
    });
  } else {
    setupRedirect();
    tryLoadConfetti();
  }
</script>
