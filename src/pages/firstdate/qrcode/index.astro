---
import BlurText from "@common/BlurText.astro";
import ButtonFD from "@common/ButtonFd.astro";
import Popup from "@common/Popup.astro";

import Layout from "@/layouts/firstdate/WithNavbar.astro";

// We'll generate the QR code on the client side using token data
---

<Layout>
  <div class="mt-10 flex justify-center">
    <BlurText
      textSize="text-3xl"
      className="font-zen-dots text-white"
      blurClassName="text-white blur-[1.75px] translate-y-[2px] font-zen-dots"
    >
      MY QR CODE
    </BlurText>
  </div>
  <Popup
    class="flex flex-col items-center justify-center"
    size="medium"
    color="light-pink"
  >
    <div class="mb-4 text-center text-xs">
      <p>*สำหรับใช้ลงทะเบียนเข้างาน</p>
      <p>โปรดแสดงแก่เจ้าหน้าที่ในวันงาน</p>
    </div>

    <!-- Loading state -->
    <div id="loading" class="flex h-48 w-4/5 items-center justify-center">
      <div class="text-center">
        <div
          class="mx-auto mb-2 h-8 w-8 animate-spin rounded-full border-2 border-pink-500 border-t-transparent"
        >
        </div>
        <p>กำลังโหลด QR Code...</p>
      </div>
    </div>

    <!-- QR Code container -->
    <div id="qr-container" class="hidden w-4/5 text-center">
      <img id="qr-image" alt="QR Code" class="mb-4 h-auto w-full" />
      <p id="student-id" class="text-md"></p>
    </div>

    <!-- Error state -->
    <div id="error" class="hidden text-center text-red-500">
      <p id="error-message">เกิดข้อผิดพลาดในการโหลด QR Code</p>
      <button
        id="retry-btn"
        class="mt-2 rounded bg-pink-500 px-4 py-2 text-white hover:bg-pink-600"
      >
        ลองใหม่
      </button>
    </div>
  </Popup>
  <div class="mb-24 flex justify-center">
    <ButtonFD href="/firstdate/home" color="white" variant="fill">
      กลับสู่หน้าหลัก
    </ButtonFD>
  </div>
</Layout>

<script>
  import QRCode from "qrcode";

  interface TokenPayload {
    studentId: string;
    citizenId: string;
    [key: string]: any;
  }

  // Auto-reload interval variable
  let reloadInterval: NodeJS.Timeout | undefined;

  function getAuthToken(): string | null {
    if (typeof window !== "undefined") {
      const localToken = localStorage.getItem("auth_token");
      if (localToken) {
        return localToken;
      }
      const cookies = document.cookie.split("; ");
      const tokenCookie = cookies.find((cookie) => cookie.startsWith("token="));
      return tokenCookie ? decodeURIComponent(tokenCookie.split("=")[1]) : null;
    }
    return null;
  }

  function decodeJWT(token: string): TokenPayload | null {
    try {
      // Split the token into parts
      const parts = token.split(".");
      if (parts.length !== 3) {
        throw new Error("Invalid token format");
      }

      // Decode the payload (second part)
      const payload = parts[1];

      // Add padding if needed for base64 decoding
      const paddedPayload =
        payload + "=".repeat((4 - (payload.length % 4)) % 4);

      // Decode base64
      const decodedPayload = atob(
        paddedPayload.replace(/-/g, "+").replace(/_/g, "/")
      );

      // Parse JSON
      const tokenData = JSON.parse(decodedPayload);

      return tokenData;
    } catch (error) {
      console.error("Error decoding JWT:", error);
      return null;
    }
  }

  const generateQRCode = async (
    studentId: string,
    citizenId: string
  ): Promise<string> => {
    const targetUrl = `studentId=${studentId}&citizenId=${citizenId}`;
    return await QRCode.toDataURL(targetUrl);
  };

  const showLoading = () => {
    document.getElementById("loading")?.classList.remove("hidden");
    document.getElementById("qr-container")?.classList.add("hidden");
    document.getElementById("error")?.classList.add("hidden");
  };

  const showQRCode = (qrDataUrl: string, studentId: string) => {
    const qrImage = document.getElementById("qr-image") as HTMLImageElement;
    const studentIdElement = document.getElementById("student-id");

    if (qrImage && studentIdElement) {
      qrImage.src = qrDataUrl;
      studentIdElement.textContent = studentId;

      document.getElementById("loading")?.classList.add("hidden");
      document.getElementById("qr-container")?.classList.remove("hidden");
      document.getElementById("error")?.classList.add("hidden");
    }
  };

  const showError = (message: string = "เกิดข้อผิดพลาดในการโหลด QR Code") => {
    const errorMessageElement = document.getElementById("error-message");
    if (errorMessageElement) {
      errorMessageElement.textContent = message;
    }

    document.getElementById("loading")?.classList.add("hidden");
    document.getElementById("qr-container")?.classList.add("hidden");
    document.getElementById("error")?.classList.remove("hidden");
  };

  const loadQRCode = async () => {
    showLoading();

    try {
      // Get authentication token
      const token = getAuthToken();
      if (!token) {
        throw new Error("ไม่พบ Token การยืนยันตัวตน กรุณาเข้าสู่ระบบใหม่");
      }

      // Decode token to get user data
      const tokenPayload = decodeJWT(token);
      if (!tokenPayload) {
        throw new Error("Token ไม่ถูกต้อง กรุณาเข้าสู่ระบบใหม่");
      }

      // Check if required fields exist
      if (!tokenPayload.studentId || !tokenPayload.citizenId) {
        throw new Error("ข้อมูลผู้ใช้ไม่ครบถ้วน กรุณาเข้าสู่ระบบใหม่");
      }

      // Generate QR code
      const qrDataUrl = await generateQRCode(
        tokenPayload.studentId,
        tokenPayload.citizenId
      );
      showQRCode(qrDataUrl, tokenPayload.studentId);
    } catch (error) {
      console.error("Error loading QR code:", error);
      const errorMessage =
        error instanceof Error
          ? error.message
          : "เกิดข้อผิดพลาดที่ไม่ทราบสาเหตุ";
      showError(errorMessage);
    }
  };

  // Initialize when page loads
  document.addEventListener("DOMContentLoaded", () => {
    loadQRCode();

    // Add retry functionality
    const retryBtn = document.getElementById("retry-btn");
    if (retryBtn) {
      retryBtn.addEventListener("click", loadQRCode);
    }
  });

  // Auto-reload functionality

  const startAutoReload = () => {
    // Clear any existing interval
    // DO NOT CLEAR THIS INTERVAL OUTSIDE THIS FUNCTION
    if (reloadInterval) {
      clearInterval(reloadInterval);
    }

    // Reload QR code every 1 seconds
    reloadInterval = setInterval(() => {
      // console.log("Auto-reloading QR code...");
      loadQRCode();
    }, 1000);
  };

  // Start auto-reload when page is visible
  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible") {
      startAutoReload();
    } else {
      // Stop auto-reload when page is hidden
      if (reloadInterval) {
        clearInterval(reloadInterval);
      }
    }
  });

  // Start auto-reload immediately
  startAutoReload();
</script>
