---
import { Home } from "@lucide/astro";
import QRCode from "qrcode";

import ButtonFd from "@/components/common/ButtonFd.astro";
import Popup from "@/components/common/Popup.astro";
import SuccessConfetti from "@/components/common/SuccessConfetti.astro";
import Layout from "@/layouts/firstdate/WithNavbar.astro";
import { getEventStatus, EVENT_CONFIGS, type EventType } from "@/lib/eventAPI";

const { eventId } = Astro.params;

if (!eventId || !(eventId in EVENT_CONFIGS)) {
  return Astro.redirect("/firstdate/home/");
}

const eventType = eventId as EventType;
const eventConfig = EVENT_CONFIGS[eventType];

function parseCookie(cookie: string): Record<string, string> {
  return Object.fromEntries(
    cookie
      .split("; ")
      .map((c) => c.split("="))
      .map(([k, v]) => [k, decodeURIComponent(v)])
  );
}

const cookie = Astro.request.headers.get("cookie") ?? "";
const authToken = parseCookie(cookie).token;
const eventStatus = await getEventStatus(eventType, authToken);
const justRegistered =
  new URL(Astro.request.url).searchParams.get("registered") === "true";

// Generate QR code if user is registered and has checkin data
let qrCodeData = null;
if (eventStatus.isRegistered && eventStatus.checkinData) {
  const { id, userId } = eventStatus.checkinData;
  const targetUrl = `id=${id}&userId=${userId}`;
  qrCodeData = await QRCode.toDataURL(targetUrl);
}
---

<Layout>
  <div class="relative z-10 px-4 py-6">
    <!-- Event Header -->
    <div class="text-center">
      <h1
        class="mt-[26px] text-center text-4xl font-bold text-white drop-shadow-lg drop-shadow-white/50"
      >
        {eventConfig.title}
      </h1>
    </div>

    <!-- Event Content Based on Status -->
    {
      !eventStatus.isRegistered &&
        !eventStatus.isLate &&
        !justRegistered &&
        !eventStatus.isComingSoon && (
          <section class="flex flex-col items-center justify-center">
            <Popup
              size="medium"
              color={eventConfig.popupColors.notRegistered}
              class="flex flex-col items-center justify-center text-center"
            >
              <p>{eventConfig.description}</p>
              <p class="mt-4">{eventConfig.schedule}</p>
              <p>{eventConfig.registrationInfo}</p>
              <p>{eventConfig.additionalInfo}</p>
              <p class="mt-4 font-bold text-red-500">
                สถานะ: ยังไม่ได้ลงทะเบียน
              </p>
            </Popup>

            <div class="flex w-full flex-col items-center justify-center gap-2">
              <ButtonFd
                class="mb-1"
                color="white"
                id="register-btn"
                data-event-id={eventId}
              >
                ลงทะเบียนเข้าร่วมงาน
              </ButtonFd>

              {(eventType === "firstdate" ||
                eventType === "freshmen-night") && (
                <ButtonFd class="mb-2" color="white" href="/firstdate/map/">
                  แผนที่งาน
                </ButtonFd>
              )}
            </div>
          </section>
        )
    }

    {
      justRegistered && (
        <SuccessConfetti
          eventName={eventConfig.title}
          eventId={eventId}
          eventConfig={eventConfig}
        />
      )
    }

    {
      eventStatus.isRegistered && !justRegistered && (
        <section class="flex flex-col items-center justify-center">
          <Popup
            size="medium"
            color={eventConfig.popupColors.registered}
            class="flex flex-col items-center justify-center text-center"
          >
            <div id="event-info-content">
              <p>{eventConfig.description}</p>
              <p class="mt-4">{eventConfig.schedule}</p>
              <p>{eventConfig.registrationInfo}</p>
              <p>{eventConfig.additionalInfo}</p>
              <p class="mt-4 font-bold text-[#C6EBC5]">
                {eventType === "rpkm"
                  ? 'สถานะ: ลงทะเบียนเข้างานแล้ว อย่าลืมไปลงทะเบียน "เลือกบ้าน" กันด้วยนะ'
                  : "สถานะ: ลงทะเบียนเข้างานแล้ว"}
              </p>
            </div>

            {qrCodeData && (
              <div
                id="qr-content"
                class="flex hidden flex-col items-center justify-center"
              >
                <div class="mb-4 text-center text-xs">
                  <p>*สำหรับใช้ลงทะเบียนเข้างาน</p>
                  <p>โปรดแสดงแก่เจ้าหน้าที่ในวันงาน</p>
                </div>
                <img
                  src={qrCodeData}
                  alt="QR Code"
                  class="h-auto w-full max-w-sm"
                />
                <p class="text-md mt-6">
                  {eventStatus.checkinData?.id.slice(0, 8)}...
                </p>
              </div>
            )}
          </Popup>

          {eventType === "firstdate" || eventType === "freshmen-night" ? (
            <div class="flex w-full flex-col items-center justify-center gap-2">
              <ButtonFd class="mb-1" color="white" id="show-qr-btn">
                แสดง QR Code เข้างาน
              </ButtonFd>
              <ButtonFd class="mb-1" color="white" href="/firstdate/maps/">
                แผนที่งาน
              </ButtonFd>
            </div>
          ) : eventType === "rpkm" ? (
            <div class="flex w-full flex-col items-center justify-center gap-2">
              <ButtonFd class="mb-1" color="white" href="/rpkm/home/">
                เข้าเว็บรับเพื่อนก้าวใหม่
              </ButtonFd>
            </div>
          ) : (
            <ButtonFd class="mb-2" color="white" href="/firstdate/home/">
              กลับหน้าหลัก
            </ButtonFd>
          )}
        </section>
      )
    }

    {
      eventStatus.isLate && (
        <section class="flex flex-col items-center justify-center">
          <Popup
            size="medium"
            color={eventConfig.popupColors.late}
            class="flex flex-col items-center justify-center text-center"
          >
            <p>{eventConfig.description}</p>
            <p class="mt-4">{eventConfig.schedule}</p>
            <p>{eventConfig.registrationInfo}</p>
            <p>{eventConfig.additionalInfo}</p>
          </Popup>
          <h1 class="mb-4 text-center text-4xl font-bold text-white drop-shadow-lg drop-shadow-white/50">
            ไม่สามารถลงทะเบียนได้
          </h1>
          <ButtonFd
            variant="fill"
            color="white"
            href="/firstdate/home/"
            class="mb-8"
          >
            <Home slot="icon" size="20" />
            กลับหน้าหลัก
          </ButtonFd>
        </section>
      )
    }

    {
      eventStatus.isComingSoon && (
        <section class="flex flex-col items-center justify-center">
          <Popup
            size="medium"
            color={eventConfig.popupColors.comingSoon}
            class="flex flex-col items-center justify-center text-center"
          >
            <h1 class="my-2 text-4xl font-bold text-white">
              {eventConfig.title}
            </h1>
            <h1 class="my-2 text-4xl font-bold text-white">Coming Soon</h1>
            <p class="mt-4 text-xl">
              พร้อมให้ลงทะเบียน
              <br />
              ในเร็วๆ นี้
            </p>
            <p class="mt-4 text-xl">อดใจอีกสักนิด แล้วไว้พบกัน!</p>
          </Popup>
          <ButtonFd variant="fill" color="white" href="/firstdate/home/">
            <Home slot="icon" size="20" />
            กลับหน้าหลัก
          </ButtonFd>
        </section>
      )
    }
  </div>
</Layout>

<script>
  const registerBtn = document.getElementById(
    "register-btn"
  ) as HTMLButtonElement;

  if (registerBtn) {
    registerBtn.addEventListener("click", async () => {
      const eventId = registerBtn.getAttribute("data-event-id");

      registerBtn.textContent = "กำลังลงทะเบียน...";
      registerBtn.disabled = true;

      try {
        const { registerForEvent } = await import("@/lib/eventAPI");
        const result = await registerForEvent(eventId as any);

        if (result.success) {
          window.location.href = `/firstdate/events/${eventId}/?registered=true`;
        } else {
          if (result.needsLogin || result.error?.includes("เข้าสู่ระบบ")) {
            alert("กรุณาเข้าสู่ระบบก่อนลงทะเบียน");
            window.location.href = "/login/";
            return;
          }

          alert(result.error || "เกิดข้อผิดพลาดในการลงทะเบียน");
          registerBtn.textContent = "ลงทะเบียนเข้าร่วมงาน";
          registerBtn.disabled = false;
        }
      } catch (error) {
        registerBtn.textContent = "ลงทะเบียนเข้าร่วมงาน";
        registerBtn.disabled = false;
        alert("เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง");
      }
    });
  }

  // Handle QR code display toggle
  const showQrBtn = document.getElementById("show-qr-btn") as HTMLButtonElement;
  const eventInfoContent = document.getElementById(
    "event-info-content"
  ) as HTMLDivElement;
  const qrContent = document.getElementById("qr-content") as HTMLDivElement;

  if (showQrBtn && eventInfoContent && qrContent) {
    showQrBtn.addEventListener("click", () => {
      if (qrContent.classList.contains("hidden")) {
        // Show QR code content, hide event info content
        eventInfoContent.classList.add("hidden");
        qrContent.classList.remove("hidden");
        showQrBtn.textContent = "ซ่อน QR Code";
      } else {
        // Hide QR code content, show event info content
        qrContent.classList.add("hidden");
        eventInfoContent.classList.remove("hidden");
        showQrBtn.textContent = "แสดง QR Code เข้างาน";
      }
    });
  }
</script>
