import { api } from "@/lib/api";
import { getAuthHeaders, getAuthToken } from "@/lib/auth";

export type EventType = "firstdate" | "rpkm" | "freshmen-night" | "cufest";

// API event names mapping
export const API_EVENT_NAMES: Record<EventType, string> = {
  firstdate: "FIRSTDATE",
  rpkm: "RPKM",
  "freshmen-night": "FRESHMENNIGHT",
  cufest: "CU_FEST",
};

export interface CheckinResponse {
  id: string;
  userId: string;
  event: string;
  status: "PRE_REGISTER";
  createdAt: string;
  updatedAt: string;
}

export interface EventStatus {
  isRegistered: boolean;
  isLate: boolean;
  registrationSuccess?: boolean;
  isComingSoon?: boolean;
  checkinData?: CheckinResponse;
}

export type ColorVariant =
  | "black"
  | "vivid-pink"
  | "light-green"
  | "light-blue"
  | "light-pink"
  | "light-beige";

export interface EventConfig {
  id: EventType;
  title: string;
  description: string;
  schedule: string;
  registrationInfo: string;
  additionalInfo: string;
  popupColors: {
    notRegistered: ColorVariant;
    registered: ColorVariant;
    late: ColorVariant;
    comingSoon: ColorVariant;
  };
}

export const EVENT_CONFIGS: Record<EventType, EventConfig> = {
  firstdate: {
    id: "firstdate",
    title: "CU First Date",
    description:
      "CU First Date ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏±‡∏ô‡πÄ‡πÄ‡∏£‡∏Å‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏ü‡∏£‡∏ä‡∏ä‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏±‡πâ‡∏ß‡∏à‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏µ ‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà ‡πÜ ‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏ô‡∏∏‡∏Å ‡πÜ ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞",
    schedule: "üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 19 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568",
    registrationInfo: "üìù ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 17 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 19:00 ‡∏ô.",
    additionalInfo: "",
    popupColors: {
      notRegistered: "vivid-pink",
      registered: "light-green",
      late: "light-beige",
      comingSoon: "light-beige",
    },
  },
  cufest: {
    id: "cufest",
    title: "Festival",
    description:
      "‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
    schedule: "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568 ",
    registrationInfo: "üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    additionalInfo: "",
    popupColors: {
      notRegistered: "vivid-pink",
      registered: "light-green",
      late: "light-beige",
      comingSoon: "light-beige",
    },
  },
  rpkm: {
    id: "rpkm",
    title: "‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà",
    description:
      "‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞ ‡πÑ‡∏î‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞",
    schedule: "üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1‚Äì3 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568",
    registrationInfo:
      'üìù ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô" ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 19:00 ‡∏ô.',
    additionalInfo:
      "ü´∂ ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‚Äú‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‚Äù ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏è‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 20:00 ‡∏ô",
    popupColors: {
      notRegistered: "vivid-pink",
      registered: "light-green",
      late: "light-beige",
      comingSoon: "light-beige",
    },
  },
  "freshmen-night": {
    id: "freshmen-night",
    title: "Freshmen Night",
    description:
      "‡∏Ñ‡∏∑‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏î‡∏à‡∏≥",
    schedule: "üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568",
    registrationInfo: "üìù ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 19:00 ‡∏ô.",
    additionalInfo: "",
    popupColors: {
      notRegistered: "vivid-pink",
      registered: "light-green",
      late: "light-beige",
      comingSoon: "light-beige",
    },
  },
};

export const getEventStatus = async (
  eventType: EventType,
  authToken?: string
): Promise<EventStatus> => {
  const apiEventName = API_EVENT_NAMES[eventType];

  // Handle events that don't have API mapping
  if (!apiEventName || eventType === "cufest") {
    return {
      isRegistered: false,
      isLate: false,
      isComingSoon: true,
    };
  }

  // Check if authenticated
  const token = authToken || getAuthToken();
  if (!token) {
    throw new Error("Authentication required");
  }

  const response = await api.get<CheckinResponse>(`/checkin/${apiEventName}`, {
    headers: getAuthHeaders(token),
  });

  if (response.success && response.data) {
    return {
      isRegistered: true,
      isLate: false,
      isComingSoon: false,
      checkinData: response.data,
    };
  }

  if (!response.success && response.error) {
    const errorMessage = response.error;

    // Check for specific error patterns from backend
    if (errorMessage.includes("before register period")) {
      return {
        isRegistered: false,
        isLate: false,
        isComingSoon: true,
      };
    } else if (errorMessage.includes("after register period")) {
      return {
        isRegistered: false,
        isLate: true,
        isComingSoon: false,
      };
    } else if (
      errorMessage.includes("404") ||
      errorMessage.includes("not found")
    ) {
      return {
        isRegistered: false,
        isLate: false,
        isComingSoon: false,
      };
    } else if (
      errorMessage.includes("401") ||
      errorMessage.includes("unauthorized")
    ) {
      throw new Error("Authentication required");
    } else {
      return {
        isRegistered: false,
        isLate: false,
        isComingSoon: true,
      };
    }
  }

  return {
    isRegistered: false,
    isLate: true,
    isComingSoon: false,
  };
};

export const registerForEvent = async (
  eventType: EventType
): Promise<{
  success: boolean;
  data?: CheckinResponse;
  error?: string;
  needsLogin?: boolean;
}> => {
  const apiEventName = API_EVENT_NAMES[eventType];

  if (!apiEventName || eventType === "cufest") {
    return { success: false, error: "Event not available for registration" };
  }

  const token = getAuthToken();
  if (!token) {
    return {
      success: false,
      error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
      needsLogin: true,
    };
  }

  const response = await api.post<CheckinResponse>(
    `/checkin/register`,
    { event: apiEventName },
    { headers: getAuthHeaders(token) }
  );

  if (response.success && response.data) {
    return { success: true, data: response.data };
  } else {
    const errorMessage = response.error || "Registration failed";

    if (errorMessage.includes("already exists")) {
      return { success: false, error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" };
    } else if (errorMessage.includes("before register period")) {
      return { success: false, error: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" };
    } else if (errorMessage.includes("after register period")) {
      return { success: false, error: "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß" };
    } else if (
      errorMessage.includes("401") ||
      errorMessage.includes("unauthorized")
    ) {
      return { success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô" };
    } else {
      return { success: false, error: errorMessage };
    }
  }
};
