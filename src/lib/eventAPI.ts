// Mock API functions for event registration status
// These will be replaced with real API calls later

export type EventType = 'firstdate' | 'rpkm' | 'freshmen-night' | 'cu-fest';

export interface EventStatus {
  isRegistered: boolean;
  isLate: boolean; // registration closed
  registrationSuccess?: boolean; // just registered
  isComingSoon?: boolean; // event not available yet
}

export interface EventConfig {
  id: EventType;
  title: string;
  description: string;
  schedule: string;
  registrationInfo: string;
  additionalInfo: string;
  popupColors: {
    notRegistered: string;
    registered: string;
    late: string;
    comingSoon: string;
  };
}

export const EVENT_CONFIGS: Record<EventType, EventConfig> = {
  'firstdate': {
    id: 'firstdate',
    title: 'CU First Date',
    description: 'CU First Date ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏±‡∏ô‡πÄ‡πÄ‡∏£‡∏Å‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏ü‡∏£‡∏ä‡∏ä‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏±‡πâ‡∏ß‡∏à‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏µ ‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà ‡πÜ ‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏ô‡∏∏‡∏Å ‡πÜ ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞',
    schedule: 'üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 19 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568',
    registrationInfo: 'üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
    additionalInfo: '',
    popupColors: {
      notRegistered: 'vivid-pink',
      registered: 'light-green',
      late: 'light-beige',
      comingSoon: 'light-beige'
    }
  },
  'cu-fest': {
    id: 'cu-fest',
    title: 'CU Fest',
    description: '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
    schedule: '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568 ',
    registrationInfo: 'üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
    additionalInfo: '',
    popupColors: {
      notRegistered: 'vivid-pink',
      registered: 'light-green',
      late: 'light-beige',
      comingSoon: 'light-beige'
    }
  },
  'rpkm': {
    id: 'rpkm',
    title: '‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà',
    description: '‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞ ‡πÑ‡∏î‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞',
    schedule: 'üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1‚Äì3 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    registrationInfo: 'üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô" ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
    additionalInfo: 'ü´∂ ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‚Äú‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‚Äù ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏Å‡∏£‡∏Å‡∏è‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 20:00 ‡∏ô',
    popupColors: {
      notRegistered: 'vivid-pink',
      registered: 'light-green',
      late: 'light-beige',
      comingSoon: 'light-beige'
    }
  },
  'freshmen-night': {
    id: 'freshmen-night',
    title: 'Freshmen Night',
    description: '‡∏Ñ‡∏∑‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏î‡∏à‡∏≥',
    schedule: 'üìÖ ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2567',
    registrationInfo: 'üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
    additionalInfo: '',
    popupColors: {
      notRegistered: 'vivid-pink',
      registered: 'light-green',
      late: 'light-beige',
      comingSoon: 'light-beige'
    }
  }
};

// Simple in-memory storage for demo purposes
// In a real app, this would be stored in a database
const registrations = new Set<EventType>();

export const getEventStatus = async (eventType: EventType): Promise<EventStatus> => {
  await new Promise(resolve => setTimeout(resolve, 100));    
  
  // Check if user is registered for this event
  const isRegistered = registrations.has(eventType);
  
  const mockData: Record<EventType, EventStatus> = {
    'firstdate': { isRegistered, isLate: false, isComingSoon: false },
    'rpkm': { isRegistered, isLate: false, isComingSoon: false },
    'freshmen-night': { isRegistered, isLate: false, isComingSoon: false },
    'cu-fest': { isRegistered, isLate: false, isComingSoon: false }
  };
  
  return mockData[eventType];
};

export const registerForEvent = async (eventType: EventType): Promise<{ success: boolean }> => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Add to registrations set
  registrations.add(eventType);
  
  // Mock successful registration
  return { success: true };
};